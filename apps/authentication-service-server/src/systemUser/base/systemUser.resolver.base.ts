/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SystemUser } from "./SystemUser";
import { SystemUserCountArgs } from "./SystemUserCountArgs";
import { SystemUserFindManyArgs } from "./SystemUserFindManyArgs";
import { SystemUserFindUniqueArgs } from "./SystemUserFindUniqueArgs";
import { CreateSystemUserArgs } from "./CreateSystemUserArgs";
import { UpdateSystemUserArgs } from "./UpdateSystemUserArgs";
import { DeleteSystemUserArgs } from "./DeleteSystemUserArgs";
import { Role } from "../../role/base/Role";
import { SystemUserService } from "../systemUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SystemUser)
export class SystemUserResolverBase {
  constructor(
    protected readonly service: SystemUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "read",
    possession: "any",
  })
  async _systemUsersMeta(
    @graphql.Args() args: SystemUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SystemUser])
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "read",
    possession: "any",
  })
  async systemUsers(
    @graphql.Args() args: SystemUserFindManyArgs
  ): Promise<SystemUser[]> {
    return this.service.systemUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SystemUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "read",
    possession: "own",
  })
  async systemUser(
    @graphql.Args() args: SystemUserFindUniqueArgs
  ): Promise<SystemUser | null> {
    const result = await this.service.systemUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SystemUser)
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "create",
    possession: "any",
  })
  async createSystemUser(
    @graphql.Args() args: CreateSystemUserArgs
  ): Promise<SystemUser> {
    return await this.service.createSystemUser({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SystemUser)
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "update",
    possession: "any",
  })
  async updateSystemUser(
    @graphql.Args() args: UpdateSystemUserArgs
  ): Promise<SystemUser | null> {
    try {
      return await this.service.updateSystemUser({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SystemUser)
  @nestAccessControl.UseRoles({
    resource: "SystemUser",
    action: "delete",
    possession: "any",
  })
  async deleteSystemUser(
    @graphql.Args() args: DeleteSystemUserArgs
  ): Promise<SystemUser | null> {
    try {
      return await this.service.deleteSystemUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async getRole(@graphql.Parent() parent: SystemUser): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
